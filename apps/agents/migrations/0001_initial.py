# Generated by Django 4.2 on 2023-05-27 13:51

import apps.agents.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('commons', '0001_initial'),
        ('system', '0015_alter_currency_exchange_rate'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(default='')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('name', models.CharField(max_length=200, verbose_name='agent name')),
                ('motto', models.CharField(blank=True, max_length=100, null=True, verbose_name='agent slogan')),
                ('logo_path', models.ImageField(blank=True, null=True, upload_to=apps.agents.models.create_agent_logo_file_path, verbose_name='company logo')),
                ('referral_code', models.CharField(max_length=15, verbose_name='agent referral code')),
                ('user_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agents', related_query_name='agent', to='auth.group', verbose_name='category of user group')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentBranch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(default='')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('branch_code', models.CharField(max_length=15, unique=True, verbose_name='agent branch code')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='agent branch name')),
                ('is_main_branch', models.BooleanField(default=False, verbose_name='is this the main branch of the agent')),
                ('email', models.EmailField(max_length=100, verbose_name='branch email address')),
                ('phone_number', models.CharField(max_length=15)),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agent_branches', related_query_name='agent_branch', to='commons.address', verbose_name='agent branch address')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branches', related_query_name='branch', to='agents.agent', verbose_name='parent agent')),
            ],
            options={
                'verbose_name_plural': 'AgentBranches',
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('request_type', models.CharField(choices=[('VIEW_PROPERTY', 'View the property'), ('AVAILABILITY', 'Check availability'), ('INFORMATION', 'Get more information')], verbose_name='type of request')),
                ('agent_branch', models.ForeignKey(help_text='The agent branch that the request is sent to', on_delete=django.db.models.deletion.CASCADE, related_name='agent_requests', related_query_name='agent_request', to='agents.agentbranch')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RequestMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('message', models.TextField()),
                ('sender', models.CharField(choices=[('AGENT', 'Agent'), ('CLIENT', 'Client')], verbose_name='message sender')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agents.request')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Requester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('first_name', models.CharField(max_length=50, verbose_name='requester first name')),
                ('middle_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='requester middle name')),
                ('last_name', models.CharField(max_length=50, verbose_name='requester last name')),
                ('email', models.EmailField(max_length=100, verbose_name='requester email address')),
                ('phone_number', models.CharField(max_length=15, verbose_name='requester phone number')),
                ('user', models.ForeignKey(blank=True, help_text='This value becomes null when the requester is anonymous user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requests', related_query_name='request', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='request',
            name='requester',
            field=models.ForeignKey(help_text='The user that the request is sent by', on_delete=django.db.models.deletion.CASCADE, related_name='user_requests', related_query_name='user_request', to='agents.requester'),
        ),
        migrations.CreateModel(
            name='AgentServiceSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('start_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('expire_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('subscription_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_subscriptions', related_query_name='service_subscription', to='agents.agent')),
                ('subscription_currency', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='system.currency')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentReferralTracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('num_of_referrals_needed', models.PositiveIntegerField(default=1, help_text='The number of referrals needed to get the reward.', verbose_name='number of referrals needed?')),
                ('num_of_current_referrals', models.PositiveIntegerField(default=1, verbose_name='current number of referrals?')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referral_trackers', related_query_name='referral_tracker', to='agents.agent')),
                ('referral_reward_plan', models.ForeignKey(help_text='The reward plan that this tracker is based on', on_delete=django.db.models.deletion.CASCADE, related_name='agent_referral_trackers', related_query_name='agent_referral_tracker', to='system.referralrewardplan')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentReferralReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_referee_reward', models.BooleanField(default=False)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referral_rewards', related_query_name='referral_reward', to='agents.agent')),
                ('coupon', models.ForeignKey(help_text='The coupon that is rewarded to the agent', on_delete=django.db.models.deletion.CASCADE, to='system.coupon')),
                ('referral_tracker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rewards', related_query_name='reward', to='agents.agentreferraltracker')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentReferral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('referee_agent', models.ForeignKey(help_text='An agent referred by another agent', on_delete=django.db.models.deletion.CASCADE, to='agents.agent')),
                ('referral_tracker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agent_referrals', related_query_name='agent_referral', to='agents.agentreferraltracker')),
                ('referrer_agent', models.ForeignKey(help_text='An agent who referred another agent', on_delete=django.db.models.deletion.CASCADE, related_name='referrals', related_query_name='referral', to='agents.agent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('start_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('expire_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('used_discounts', models.PositiveIntegerField(default=0, verbose_name='how many discounts used so far?')),
                ('max_discounts', models.PositiveIntegerField(default=0, verbose_name='how many total discounts you have?')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discounts', related_query_name='discount', to='agents.agent')),
                ('discount', models.ForeignKey(help_text='parent discount configuration that this discount is based from', on_delete=django.db.models.deletion.CASCADE, related_name='agent_discounts', related_query_name='agent_discount', to='system.discount')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_superadmin', models.BooleanField(default=False, help_text='Is this user the super administrator of the branch?')),
                ('agent_branch', models.ForeignKey(help_text='The agent branch that this user works in', on_delete=django.db.models.deletion.CASCADE, related_name='agent_branches', related_query_name='agent_branch', to='agents.agentbranch')),
                ('user', models.OneToOneField(help_text='The user that works as admin in the agent branch', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user admin')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
